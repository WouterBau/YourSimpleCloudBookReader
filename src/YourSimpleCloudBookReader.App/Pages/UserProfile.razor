@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using Microsoft.Graph.Models
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject IJSRuntime JSRuntime
@attribute [Authorize]

@if (!IsContentVisible) {
    <h3>User Profile</h3>
    @if (user == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tr>
                <td> DisplayName </td>
                <td> @user.DisplayName </td>
            </tr>
            <tr>
                <td> UserPrincipalName </td>
                <td> @user.UserPrincipalName </td>
            </tr>
        </table>

        @if(isLoadingList) {
            <p>Loading list...</p>
        }
        else {
            <table class="table">
                <thead>
                    <tr>
                        <th>Item Type</th>
                        <th>Item Name</th>
                    </tr>
                </thead>
                @if(CanNavigateUp){
                    <tr>
                        <td>Folder</td>
                        <td><Button @onclick="() => NavigateUp()">..</Button></td>
                    </tr>
                }
                @foreach (var item in items)
                {
                    <tr>
                        @if (item.Folder != null)
                        {
                            <td>Folder</td>
                            <td><Button @onclick="() => NavigateToFolder(item)">@item.Name</Button></td>
                        }
                        else if (item.Name?.EndsWith(".pdf") ?? false)
                        {
                            <td>File</td>
                            <td><Button @onclick="() => GetFileContent(item)">@item.Name</Button></td>
                        }
                    </tr>
                }
            </table>
        }
    }
}

@if (isLoadingContent)
{
    <p>Loading content...</p>
}

@if (IsContentVisible) {
    <h4>@item.Name</h4>
    <Button @onclick="ClosePdf">Close</Button>
    
    <div class="mt-3">
        <h5>PDF Viewer</h5>
        <div class="pdf-js-container">
            <div class="pdf-controls mb-2">
                <Button @onclick="PreviousPage" Disabled="@(currentPage <= 1)">Previous</Button>
                <span class="mx-2">Page @currentPage of @totalPages</span>
                <Button @onclick="NextPage" Disabled="@(currentPage >= totalPages)">Next</Button>
            </div>
            <canvas id="pdfCanvas" style="border: 1px solid #ccc; max-width: 100%;"></canvas>
        </div>
    </div>
}

<script>
    window.pdfJsHelper = {        
        loadPdfFromBytes: async function (pdfBytes) {
            try {
                // Since PDF.js is loaded as a module, we need to import it dynamically
                const pdfjsLib = await import('https://cdnjs.cloudflare.com/ajax/libs/pdf.js/5.3.93/pdf.min.mjs');
                
                // Set worker source
                pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/5.3.93/pdf.worker.min.mjs';
                
                // Clean up previous PDF if exists
                if (window.currentPdf) {
                    window.currentPdf.destroy();
                    window.currentPdf = null;
                }
                
                // Convert .NET byte array to Uint8Array
                const uint8Array = new Uint8Array(pdfBytes);
                console.log(`Loading PDF from byte array, size: ${uint8Array.length} bytes`);
                
                // Load PDF document from byte array
                const pdf = await pdfjsLib.getDocument({data: uint8Array}).promise;
                window.currentPdf = pdf;
                
                console.log(`PDF loaded successfully, pages: ${pdf.numPages}`);
                return pdf.numPages;
            } catch (error) {
                console.error('Error loading PDF from bytes:', error);
                return 0;
            }
        },
        
        renderPage: async function (pageNum) {
            try {
                if (!window.currentPdf) {
                    console.error('No PDF loaded');
                    return false;
                }
                
                // Wait for canvas element to be available with retry mechanism
                let canvas = null;
                let retries = 0;
                const maxRetries = 10;
                
                while (!canvas && retries < maxRetries) {
                    canvas = document.getElementById('pdfCanvas');
                    if (!canvas) {
                        console.log(`Canvas not found, waiting... (attempt ${retries + 1})`);
                        await new Promise(resolve => setTimeout(resolve, 50));
                        retries++;
                    }
                }
                
                if (!canvas) {
                    console.error('Canvas element not found after retries');
                    return false;
                }
                
                const page = await window.currentPdf.getPage(pageNum);
                const context = canvas.getContext('2d');
                
                // Clear the canvas first
                context.clearRect(0, 0, canvas.width, canvas.height);
                
                const viewport = page.getViewport({ scale: 1.5 });
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                
                const renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };
                
                await page.render(renderContext).promise;
                console.log(`Successfully rendered page ${pageNum}`);
                return true;
            } catch (error) {
                console.error('Error rendering page:', error);
                return false;
            }
        },
        
        cleanup: function() {
            if (window.currentPdf) {
                window.currentPdf.destroy();
                window.currentPdf = null;
                console.log('PDF cleanup completed');
            }
        }
    };
</script>

@code {

    private User? user;
    private Drive? drive;

    private bool isLoadingList = false;
    private bool CanNavigateUp { get { return folderStack.Count > 1; } }

    private readonly Stack<DriveItem> folderStack = new Stack<DriveItem>();
    private IEnumerable<DriveItem> items = new List<DriveItem>();

    private bool isLoadingContent = false;
    private string contentString = string.Empty;
    private bool IsContentVisible => !string.IsNullOrWhiteSpace(contentString);
    private DriveItem? item;
    
    private int currentPage = 1;
    private int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.GetAsync();
            if (user == null)
            {
                return;
            }

            drive = await GraphServiceClient.Me.Drive.GetAsync();
            var root = await GraphServiceClient.Drives[drive.Id].Root.GetAsync();
            folderStack.Push(root);
            await GetFolderItems(root);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task NavigateToFolder(DriveItem folder)
    {
        folderStack.Push(folder);
        await GetFolderItems(folder);
    }

    private async Task GetFolderItems(DriveItem folder)
    {
        isLoadingList = true;
        StateHasChanged();

        items = (await GraphServiceClient.Drives[drive.Id].Items[folder.Id].Children.GetAsync())?.Value ?? new List<DriveItem>();
        isLoadingList = false;
        StateHasChanged();
    }

    private async Task NavigateUp() {
        if (!CanNavigateUp)
            return;

        folderStack.Pop();
        var item = folderStack.Peek();
        await GetFolderItems(item);
    }

    private async Task GetFileContent(DriveItem file)
    {
        if (file.File == null)
            return;

        contentString = "";
        isLoadingContent = true;
        StateHasChanged();

        item = file;
        
        try
        {
            var content = await GraphServiceClient.Drives[drive.Id].Items[file.Id].Content.GetAsync();
            
            // Convert to byte array more efficiently
            byte[] pdfBytes;
            if (content is MemoryStream ms)
            {
                pdfBytes = ms.ToArray();
            }
            else
            {
                using var memoryStream = new MemoryStream();
                await content.CopyToAsync(memoryStream);
                pdfBytes = memoryStream.ToArray();
            }
            
            // Pass byte array directly to JavaScript instead of Base64 string
            await LoadPdfWithPdfJs(pdfBytes);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading PDF: {ex.Message}");
        }
        finally
        {
            isLoadingContent = false;
            StateHasChanged();
        }
    }

    private async Task LoadPdfWithPdfJs(byte[] pdfBytes)
    {
        try
        {
            totalPages = await JSRuntime.InvokeAsync<int>("pdfJsHelper.loadPdfFromBytes", pdfBytes);
            currentPage = 1;
            
            if (totalPages > 0)
            {
                // Set contentString to indicate PDF is loaded (for UI visibility)
                contentString = "loaded";
                
                // Ensure the DOM is updated before trying to render
                StateHasChanged();
                await Task.Delay(100); // Give Blazor time to render the canvas element
                
                await JSRuntime.InvokeAsync<bool>("pdfJsHelper.renderPage", currentPage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading PDF with PDF.js: {ex.Message}");
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await JSRuntime.InvokeAsync<bool>("pdfJsHelper.renderPage", currentPage);
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await JSRuntime.InvokeAsync<bool>("pdfJsHelper.renderPage", currentPage);
            StateHasChanged();
        }
    }

    private async Task ClosePdf()
    {
        // Clean up PDF.js memory
        await JSRuntime.InvokeVoidAsync("pdfJsHelper.cleanup");
        
        contentString = string.Empty;
        currentPage = 1;
        totalPages = 0;
        StateHasChanged();
    }

}
