@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using Microsoft.Graph.Models
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@attribute [Authorize]

<h3>User Profile</h3>
@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Property</th>
                <th>Value</th>
            </tr>
        </thead>
        <tr>
            <td> DisplayName </td>
            <td> @user.DisplayName </td>
        </tr>
        <tr>
            <td> UserPrincipalName </td>
            <td> @user.UserPrincipalName </td>
        </tr>
    </table>



    @if(isLoadingList) {
        <p>Loading list...</p>
    }
    else {
        <table class="table">
            <thead>
                <tr>
                    <th>Item Type</th>
                    <th>Item Name</th>
                </tr>
            </thead>
            @foreach (var item in items)
            {
                <tr>
                    @if (item.Folder != null)
                    {
                        <td>Folder</td>
                        <td><button @onclick="() => NavigateToFolder(item)">@item.Name</button></td>
                    }
                    else if (item.Name?.EndsWith(".pdf") ?? false)
                    {
                        <td>File</td>
                        <td>@item.Name</td>
                    }
                </tr>
            }
        </table>
    }
}

@code {

    User? user;
    Drive? drive;

    bool isLoadingList = false;

    Stack<DriveItem> folderStack = new Stack<DriveItem>();
    IEnumerable<DriveItem> items;
    DriveItem? item;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.GetAsync();
            if (user == null)
            {
                return;
            }

            drive = await GraphServiceClient.Me.Drive.GetAsync();
            var root = await GraphServiceClient.Drives[drive.Id].Root.GetAsync();
            await GetFolderItems(root);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async void NavigateToFolder(DriveItem folder)
    {
        await GetFolderItems(folder);
    }

    private async Task GetFolderItems(DriveItem folder)
    {
        folderStack.Push(folder);
        isLoadingList = true;
        StateHasChanged();

        items = (await GraphServiceClient.Drives[drive.Id].Items[folder.Id].Children.GetAsync()).Value ?? new List<DriveItem>();
        isLoadingList = false;
        StateHasChanged();
    }

}
